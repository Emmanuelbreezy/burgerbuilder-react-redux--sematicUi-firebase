{"version":3,"sources":["components/PostWrapper/NewPost/NewPost.js"],"names":["NewPost","state","title","content","author","loaded","status","submitted","postDataHandler","data","body","setState","axios","post","then","response","console","log","props","history","replace","catch","error","alert","redirect","this","to","posted","statusBoolean","statusError","Successmessage","success","header","Errormessage","warning","as","Grid","style","marginTop","Row","textAlign","Column","loading","onSubmit","Group","widths","Input","label","placeholder","value","onChange","event","target","TextArea","Select","options","key","text","Button","Component"],"mappings":"4NAaMA,E,2MACFC,MAAQ,CACJC,MAAO,GACPC,QAAS,GACTC,OAAQ,MACRC,QAAO,EACPC,OAAQ,KACRC,WAAW,G,EAIfC,gBAAkB,WAEjB,IAAMC,EAAO,CACPP,MAAM,EAAKD,MAAMC,MACjBQ,KAAK,EAAKT,MAAME,QAChBC,OAAO,EAAKH,MAAMG,QAExB,EAAKO,SAAS,CAACN,QAAO,IACrBO,IAAMC,KAAK,SAASJ,GACZK,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAS,iBAErB,EAAKJ,SAAS,CACXT,MAAO,GACPC,QAAS,GACTC,OAAQ,MACRC,QAAO,EACPC,OAAQS,EAAST,SAEpB,EAAKY,MAAMC,QAAQC,QAAQ,aAIhCC,OAAM,SAAAC,GACL,EAAKX,SAAS,CACPT,MAAO,GACPC,QAAS,GACTC,OAAQ,MACRC,QAAO,EACPC,OAAO,MAEdiB,MAAM,wBAAwBD,EAAMhB,Y,wEAOlC,IAAD,OACFkB,EAAW,KACZC,KAAKxB,MAAMM,YACViB,EAAW,kBAAC,IAAD,CAAUE,GAAG,YAG5B,IAAMC,IAASF,KAAKxB,MAAMI,OACpBuB,EAAsC,MAAtBH,KAAKxB,MAAMK,OAC3BuB,EAAqC,MAAvBJ,KAAKxB,MAAMK,OAMzBwB,EAAkB,kBAAC,IAAD,CAASC,SAAO,EAACC,OAAO,iBAAiB7B,QAAQ,mCACnE8B,EAAgB,kBAAC,IAAD,CAASC,SAAO,EAACF,OAAO,uBAAuB7B,QAAQ,mCAC7E,OACI,kBAAC,IAAD,CAAYgC,GAAIC,IAAOC,MAAO,CAAEC,UAAW,QACnCd,EACA,kBAAC,IAAKe,IAAN,CAAUC,UAAU,UAClB,kBAAC,IAAKC,OAAN,KAEC,kBAAC,IAAD,CAAMC,QAASf,EAAQgB,SAAUlB,KAAKjB,gBAAiBuB,QAASH,EAAeM,QAASL,GACtF,kBAAC,IAAKe,MAAN,CAAYC,OAAO,SAChB,kBAAC,IAAKC,MAAN,CAAaC,MAAM,QAAQC,YAAY,gBAAgBC,MAAOxB,KAAKxB,MAAMC,MAAOgD,SAAU,SAACC,GAAD,OAAW,EAAKxC,SAAS,CAACT,MAAOiD,EAAMC,OAAOH,YAE5I,kBAAC,IAAKI,SAAN,CAAgBN,MAAM,UAAUC,YAAY,sBAAsBC,MAAOxB,KAAKxB,MAAME,QAAS+C,SAAU,SAACC,GAAD,OAAW,EAAKxC,SAAS,CAACR,QAASgD,EAAMC,OAAOH,WACvJ,kBAAC,IAAKL,MAAN,CAAYC,OAAO,SACf,kBAAC,IAAKS,OAAN,CAAcP,MAAM,SAASQ,QAlBlC,CACZ,CAACC,IAAK,IAAMC,KAAK,MAAMR,MAAM,OAC7B,CAACO,IAAK,IAAMC,KAAK,OAAOR,MAAM,SAgBkCD,YAAY,SAASC,MAAOxB,KAAKxB,MAAMG,OAAQ8C,SAAU,SAACC,GAAD,OAAW,EAAKxC,SAAS,CAACP,OAAQ+C,EAAMC,OAAOH,YAGxJrB,EAAgBE,EAAiBD,EAAcI,EAAe,KACjE,kBAAC,IAAKyB,OAAN,yB,GAjFFC,aA4FP3D","file":"static/js/15.12ef6665.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n//import axios from 'axios';\r\nimport axios from '../../../axios';\r\nimport {\r\n    Grid,\r\n    Responsive,\r\n    Form,\r\n    Message\r\n    } from 'semantic-ui-react';\r\n//import classes from \"./NewPost.module.css\";\r\n\r\nclass NewPost extends Component {\r\n    state = {\r\n        title: '',\r\n        content: '',\r\n        author: 'Max',\r\n        loaded:false,\r\n        status: null,\r\n        submitted: false\r\n    }\r\n\r\n\r\n    postDataHandler = ()=>{\r\n     \r\n     const data = {\r\n           title:this.state.title,\r\n           body:this.state.content,\r\n           author:this.state.author\r\n     }\r\n     this.setState({loaded:true});\r\n      axios.post('/posts',data)\r\n             .then(response =>{\r\n                 console.log(response,'RESPONSE DATA');\r\n\r\n                 this.setState({\r\n                    title: '',\r\n                    content: '',\r\n                    author: 'Max',\r\n                    loaded:false,\r\n                    status: response.status,\r\n                 });\r\n                 this.props.history.replace('/posts');\r\n\r\n\r\n           })\r\n           .catch(error=>{\r\n             this.setState({\r\n                    title: '',\r\n                    content: '',\r\n                    author: 'Max',\r\n                    loaded:false,\r\n                    status:400\r\n             });\r\n             alert(\"Network error to post\",error.status);\r\n\r\n           })\r\n    }\r\n    \r\n\r\n\r\n    render () {\r\n        let redirect = null\r\n        if(this.state.submitted){\r\n            redirect = <Redirect to='/posts' />;\r\n        }\r\n         \r\n        const posted = this.state.loaded ? true : false;\r\n        const statusBoolean = this.state.status === 201 ? true : false;\r\n        const statusError = this.state.status ===  400 ? true : false;\r\n\r\n        const option = [\r\n           {key: 'm' , text:'Max',value:'max'},\r\n           {key: 'o' , text:'Manu',value:'manu'},\r\n        ];\r\n        const Successmessage = (<Message success header='Form Completed' content=\"Posted contents successfully!!\" />);\r\n        const Errormessage = (<Message warning header=\"Something went wrong\" content=\"Check your connection properly\" />);\r\n        return (\r\n            <Responsive as={Grid}  style={{ marginTop: \"1em\"}}>\r\n                   {redirect}\r\n                    <Grid.Row textAlign=\"center\" >\r\n                      <Grid.Column>\r\n                      \r\n                       <Form loading={posted} onSubmit={this.postDataHandler} success={statusBoolean} warning={statusError}>\r\n                         <Form.Group widths='equal'>\r\n                            <Form.Input  label='Title' placeholder='Write a Title' value={this.state.title} onChange={(event) => this.setState({title: event.target.value})} />  \r\n                         </Form.Group>\r\n                        <Form.TextArea  label='Content' placeholder='Write a description' value={this.state.content} onChange={(event) => this.setState({content: event.target.value})} />  \r\n                        <Form.Group widths='equal'>\r\n                            <Form.Select  label='Author' options={option}  placeholder='Author' value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}/>  \r\n    \r\n                         </Form.Group>\r\n                         { statusBoolean ? Successmessage : statusError ? Errormessage : null}\r\n                        <Form.Button> Submit </Form.Button>\r\n\r\n                        </Form>\r\n                       </Grid.Column>\r\n                </Grid.Row>\r\n          </Responsive>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewPost;"],"sourceRoot":""}