{"version":3,"sources":["containers/Auth/Auth.js"],"names":["Auth","state","orderForm","email","value","valid","touched","invalid","validation","required","isEmail","password","isupperCase","isnumeric","minLength","submitted","error","formIsValid","isSignup","handlerForm","e","name","singleorderEle","updateObject","checkValid","orderFF","formisvalid","inputIdentifier","setState","onRegisterUser","event","preventDefault","props","onAuth","oFF","switchAuthModeHandler","prevState","this","building","authRedirectPath","onSetAuthRedirectPath","load","loaded","statusBoolean","status","statusError","Successmessage","success","header","content","Errormessage","switchNot","switchLabl","authRedirect","isUserAuthenticatd","to","ALink","as","Container","style","marginTop","textAlign","Responsive","onlyMobile","verticalAlign","Row","Column","width","stacked","color","loading","onSubmit","Group","widths","Field","Input","focus","fluid","icon","textalign","placeholder","onChange","Button","size","href","cursor","onClick","minWidth","iconPosition","Component","connect","auth","token","burgerbuilder","dispatch","burgerbuilderActions"],"mappings":"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","file":"static/js/16.80d68d5b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';  \r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport {\r\n    Grid,\r\n    Responsive,\r\n    Form,\r\n    Message,\r\n    Header,\r\n    Segment,\r\n    Container\r\n    } from 'semantic-ui-react';\r\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\r\nimport * as burgerbuilderActions from '../../store/actions/burgerAction/burgerIndex';\r\nimport {updateObject,checkValid} from '../../shared/utility';\r\n\r\n\r\n\r\n\r\nclass Auth extends Component {\r\n\r\n\t\r\n\tstate = {\r\n\r\n\t\torderForm:{\r\n\t\t\temail:{\r\n\t\t\t\tvalue:'',\r\n\t\t\t\tvalid:false,\r\n\t\t\t\ttouched:false,\r\n\t\t\t\tinvalid:false,\r\n\t\t\t\tvalidation:{\r\n\t\t\t\t\trequired:true,\r\n\t\t\t\t\tisEmail:true,\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tpassword:{\r\n\t\t\t\tvalue:'',\r\n\t\t\t\tvalid:false,\r\n\t\t\t\ttouched:false,\r\n\t\t\t\tinvalid:false,\r\n\t\t\t\tvalidation:{\r\n\t\t\t\t\trequired:true,\r\n\t\t\t\t\tisupperCase:true,\r\n\t\t\t\t\tisnumeric:true,\r\n\t\t\t\t\tminLength:6,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t    },\r\n\r\n        submitted: false,\r\n        error: false,\r\n        formIsValid:false,\r\n        isSignup:true\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (!this.props.building && this.props.authRedirectPath !=='/') {\r\n\t\t\tthis.props.onSetAuthRedirectPath();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\thandlerForm = (e,{name,value})  => {\r\n\t\tconst singleorderEle = updateObject(this.state.orderForm,{\r\n            value:value,\r\n            valid: checkValid(value, this.state.orderForm[name].validation),\r\n            invalid: !checkValid(value, this.state.orderForm[name].validation),\r\n            touched: true\r\n        });\r\n\t\tconst orderFF = updateObject(this.state.orderForm,{\r\n            [name]: singleorderEle\r\n        });\r\n\r\n\t\tlet formisvalid = true;\r\n\t\tfor(let inputIdentifier in orderFF){\r\n\t\t\tformisvalid = orderFF[inputIdentifier].valid && formisvalid;\r\n\t\t}\r\n\t\tthis.setState({orderForm:orderFF,formIsValid:formisvalid});\r\n\r\n    \t}\r\n\r\n    \tonRegisterUser = (event) =>{\r\n    \t\tevent.preventDefault();\r\n    \t\tif (this.state.formIsValid) {\r\n    \t\t\tthis.props.onAuth(this.state.orderForm.email.value,this.state.orderForm.password.value,this.state.isSignup);\r\n    \t\t\tconst oFF = {\r\n\t\t\t\t\t...this.state.orderForm\r\n\t\t\t\t};\r\n\t\t\t\toFF['email'].value = '';\r\n\t\t\t\toFF['password'].value = '';\r\n\t\t\t\tthis.setState({orderForm:oFF});\r\n    \t\t}else{\r\n    \t\t\tthis.setState({error:true});\r\n    \t\t\treturn;\r\n    \t\t}\r\n    \t}\r\n\r\n    \tswitchAuthModeHandler = () =>{\r\n    \t\tthis.setState(prevState => {\r\n    \t\t\treturn{\r\n    \t\t\t\tisSignup:!prevState.isSignup\r\n    \t\t\t};\r\n    \t\t});\r\n    \t}\r\n\r\n\trender() {\r\n        const load = this.props.loaded ? true : false;\r\n\t\tconst statusBoolean = this.props.status === 200 ? true : false;\r\n        const statusError = this.props.status ===  400 ? true : false;\r\n\r\n        const Successmessage = (<Message success header='Form Completed' content=\"Posted contents successfully!!\" />);\r\n        const Errormessage = (<Message error header=\"Something went wrong\" content=\"Check your connection properly\" />);\r\n\r\n        const  switchNot= this.state.isSignup ? ' Already have an account?' : 'New to us?' ;\r\n        const  switchLabl= this.state.isSignup ? 'SIGN IN' : 'SIGN UP' ;\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isUserAuthenticatd) {\r\n        \tauthRedirect =  <Redirect to={this.props.authRedirectPath} />;\r\n        }\r\n\r\n        const ALink = this.state.isSignup ? 'signup':'signin';\r\n\r\n\t\treturn (\r\n\t\t\t<Aux>\r\n\t\t\t\t{authRedirect}\r\n\t\t\t\t<Responsive as={Container}  style={{ marginTop: \"1em\",textAlign:\"center\"}} {...Responsive.onlyMobile}>\r\n                <Grid textAlign='center' verticalAlign='middle'>\r\n                <Grid.Row>\r\n                  <Grid.Column width={11}>\r\n                <Segment stacked>\r\n                <br />\r\n                   <Header textAlign='center' as=\"h2\" color=\"black\"> BURGER APP </Header>\r\n                <br />\r\n                   <Form loading={load}  onSubmit={this.onRegisterUser} success={statusBoolean} error={statusError}>\r\n                     <Form.Group widths='equal'>\r\n                     <Form.Field>\r\n\t                    \t<label style={{textAlign:\"left\"}}>Email or Phone</label>\r\n\t                    \t<Form.Input focus={this.state.orderForm['email']['touched']}  fluid icon='mail' textalign='left' placeholder='Email' value={this.state.orderForm['email']['value']} name=\"email\" error={this.state.orderForm['email']['invalid']}  onChange={this.handlerForm} />  \r\n\t                </Form.Field>\r\n\t                <Form.Field>\r\n\t                    \t<label style={{textAlign:\"left\"}}>Password</label>\r\n\t                     \t<Form.Input focus={this.state.orderForm['password']['touched']} fluid icon='lock' textalign='left'  placeholder='Password' value={this.state.orderForm['password']['value']} name=\"password\" error={this.state.orderForm['email']['invalid']}  onChange={this.handlerForm} />  \r\n\t                </Form.Field>\r\n\r\n                     </Form.Group>\r\n                     { statusBoolean ? Successmessage : statusError ? Errormessage : null}\r\n                    <Form.Button color=\"brown\" size='large'> {this.state.isSignup ? 'SIGN UP':'SIGN IN'} </Form.Button>\r\n                <br />\r\n                    </Form>\r\n                    <Message>\r\n                    \t{switchNot}  <a href={'#'+ ALink} style={{cursor:\"pounter\"}} onClick={this.switchAuthModeHandler}>{switchLabl}</a>\r\n                    </Message>\r\n                </Segment>\r\n                   </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            </Responsive>\r\n\r\n\t\t\t\t<Responsive as={Container}  style={{ marginTop: \"2em\"}} minWidth={768}>\r\n\t                <Grid textAlign='center' verticalAlign='middle'>\r\n\t                <Grid.Row>\r\n\t                  <Grid.Column width={7}>\r\n\t                  <Segment stacked>\r\n\t                  <br />\r\n\t                   <Header textAlign='center' as=\"h2\" color=\"black\"> BURGER APP </Header>\r\n\t                   <br />\r\n\t                   <Form loading={load} onSubmit={this.onRegisterUser} success={statusBoolean} error={statusError}>\r\n\t\t                    <Form.Field>\r\n\t\t                    \t<label style={{textAlign:\"left\"}}>Email or Phone</label>\r\n\t\t                    \t<Form.Input fluid icon='mail' iconPosition='right' textAlign='left' placeholder='Email' value={this.state.orderForm['email']['value']} name=\"email\" error={this.state.orderForm['email']['invalid']}  onChange={this.handlerForm} />  \r\n\t\t                     </Form.Field>\r\n\t\t                     <Form.Field>\r\n\t\t                    \t<label style={{textAlign:\"left\"}}>Password</label>\r\n\t\t                     \t<Form.Input fluid icon='lock' iconPosition='right' textAlign='left'  placeholder='Password' value={this.state.orderForm['password']['value']} name=\"password\" error={this.state.orderForm['email']['invalid']}  onChange={this.handlerForm} />  \r\n\t\t                     </Form.Field>\r\n\t\t                     { statusBoolean ? Successmessage : statusError ? Errormessage : null}\r\n\t\t                    <Form.Button size='large' color=\"brown\">{this.state.isSignup ? 'SIGN UP':'SIGN IN'}</Form.Button>\r\n\t                  <br />\r\n\t                    </Form>\r\n\t                    <Message>\r\n                    \t{switchNot}  <a href={'#'+ ALink} style={{cursor:\"pounter\"}} onClick={this.switchAuthModeHandler}>{switchLabl}</a>\r\n\t                    </Message>\r\n\t            </Segment>\r\n\t                   </Grid.Column>\r\n\t            </Grid.Row>\r\n\t            </Grid>\r\n\r\n            </Responsive>\r\n\t\t</Aux>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n    \tloaded:state.auth.loaded,\r\n        status:state.auth.status,\r\n        isUserAuthenticatd:state.auth.token !== null,\r\n        building:state.burgerbuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        onAuth:(email,password,isSignup) => dispatch(burgerbuilderActions.authSecure(email,password,isSignup)),\r\n        onSetAuthRedirectPath:()=> dispatch(burgerbuilderActions.setAuthRedirectPath('/'))\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"],"sourceRoot":""}